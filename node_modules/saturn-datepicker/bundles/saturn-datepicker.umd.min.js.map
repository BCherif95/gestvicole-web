{"version":3,"sources":["ng://saturn-datepicker/datetime/date-adapter.ts","ng://saturn-datepicker/datetime/date-formats.ts","node_modules/tslib/tslib.es6.js","ng://saturn-datepicker/datetime/native-date-adapter.ts","ng://saturn-datepicker/datetime/native-date-formats.ts","ng://saturn-datepicker/datetime/index.ts","ng://saturn-datepicker/datepicker/datepicker-errors.ts","ng://saturn-datepicker/datepicker/datepicker-intl.ts","ng://saturn-datepicker/datepicker/calendar-body.ts","ng://saturn-datepicker/datepicker/month-view.ts","ng://saturn-datepicker/datepicker/multi-year-view.ts","ng://saturn-datepicker/datepicker/year-view.ts","ng://saturn-datepicker/datepicker/calendar.ts","ng://saturn-datepicker/datepicker/datepicker-animations.ts","ng://saturn-datepicker/datepicker/datepicker.ts","ng://saturn-datepicker/datepicker/datepicker-input.ts","ng://saturn-datepicker/datepicker/datepicker-toggle.ts","ng://saturn-datepicker/datepicker/datepicker-module.ts"],"names":["MAT_DATE_LOCALE","InjectionToken","providedIn","factory","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","MAT_DATE_LOCALE_PROVIDER","provide","useExisting","DateAdapter","this","_localeChanges","Subject","Object","defineProperty","prototype","deserialize","value","isDateInstance","isValid","invalid","setLocale","locale","next","compareDate","first","second","getYear","getMonth","getDate","sameDate","firstValid","secondValid","clampDate","date","min","max","MAT_DATE_FORMATS","extendStatics","d","b","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","create","__assign","assign","t","s","i","n","arguments","length","call","apply","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","long","short","narrow","DEFAULT_DATE_NAMES","range","String","DEFAULT_DAY_OF_WEEK_NAMES","FIRST_DAY_OF_WEEK","af","ar","ar-ly","ar-ma","ar-tn","az","be","bg","bm","br","bs","ca","cs","cv","cy","da","de","de-at","de-ch","el","en-au","en-gb","en-ie","en-nz","eo","es","es-do","et","eu","fa","fi","fo","fr","fr-ch","fy","gd","gl","gom-latn","hr","hu","hy-am","id","is","it","jv","ka","kk","km","ky","lb","lt","lv","me","mi","mk","ms","ms-my","mt","my","nb","nl","nl-be","nn","pl","pt","pt-BR","ro","ru","sd","se","sk","sl","sq","sr","sr-cyrl","ss","sv","sw","tet","tg","tl-ph","tlh","tr","tzl","tzm","tzm-latn","ug-cn","uk","ur","uz","uz-latn","vi","x-pseudo","yo","zh-cn","ISO_8601_REGEX","valueFunction","valuesArray","NativeDateAdapter","_super","matDateLocale","platform","_this","useUtcForDisplay","TRIDENT","_clampDate","EDGE","tslib_1.__extends","getFullYear","getDayOfWeek","getDay","getMonthNames","style","dtf_1","DateTimeFormat","month","timeZone","_stripDirectionalityCharacters","_format","Date","getDateNames","dtf_2","day","getDayOfWeekNames","dtf_3","weekday","getYearName","dtf","year","getFirstDayOfWeek","toLowerCase","substr","getNumDaysInMonth","_createDateWithOverflow","clone","createDate","Error","result","today","parse","format","displayFormat","setFullYear","Math","toDateString","addCalendarYears","years","addCalendarMonths","months","newDate","addCalendarDays","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","join","test","obj","isNaN","getTime","NaN","slice","str","replace","UTC","getHours","getMinutes","getSeconds","getMilliseconds","Injectable","Optional","type","Inject","args","Platform","MAT_NATIVE_DATE_FORMATS","dateInput","display","monthYearLabel","dateA11yLabel","monthYearA11yLabel","NativeDateModule","NgModule","imports","PlatformModule","providers","useClass","SatNativeDateModule","useValue","Éµ0$1","createMissingDateImplError","provider","SatDatepickerIntl","changes","calendarLabel","openCalendarLabel","prevMonthLabel","nextMonthLabel","prevYearLabel","nextYearLabel","prevMultiYearLabel","nextMultiYearLabel","switchToMonthViewLabel","switchToMultiYearViewLabel","SatCalendarCell","displayValue","ariaLabel","enabled","cssClasses","SatCalendarBody","_elementRef","_ngZone","rangeMode","numCols","activeCell","cellAspectRatio","selectedValueChange","EventEmitter","_cellClicked","cell","emit","_mouseOverCell","_cellOver","ngOnChanges","columnChanges","rows","_firstRowOffset","_cellPadding","_cellWidth","_isActiveCell","rowIndex","colIndex","cellNumber","_isSemiSelected","rangeFull","begin","end","_isBetweenOverAndBegin","beginSelected","isBeforeSelected","_isBegin","_isEnd","_focusActiveCell","runOutsideAngular","onStable","asObservable","pipe","take","subscribe","nativeElement","querySelector","focus","Component","moduleId","module","selector","template","host","class","role","aria-readonly","exportAs","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","ElementRef","NgZone","Input","Output","SatMonthView","_changeDetectorRef","_dateFormats","_dateAdapter","_dir","closeAfterSelection","_rangeFull","_beginDateSelected","selectedChange","_userSelection","activeDateChange","firstDayOfWeek","narrowWeekdays","weekdays","map","_weekdays","concat","_activeDate","_beginDate","_getValidDateOrNull","updateRangeSpecificValues","_endDate","oldActiveDate","validDate","minDate","maxDate","_hasSameMonthAndYear","_init","_selected","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","ngAfterContentInit","_dateSelected","selectedYear","activeDate","selectedMonth","selectedDate","_createWeekCells","_handleCalendarBodyKeydown","event","isRtl","_isRtl","keyCode","LEFT_ARROW","RIGHT_ARROW","UP_ARROW","DOWN_ARROW","HOME","END","PAGE_UP","altKey","PAGE_DOWN","ENTER","SPACE","dateFilter","preventDefault","selected","_todayDate","_monthLabel","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","markForCheck","_matCalendarBody","daysInMonth","dateNames","_weeks","push","_shouldEnableDate","cellClasses","dateClass","undefined","d1","d2","_beginDateNumber","_endDateNumber","beginDate","endDate","ChangeDetectorRef","decorators","Directionality","ViewChild","yearsPerPage","SatMultiYearView","yearSelected","floor","_selectedYear","_todayYear","activeYear","activeOffset","_years","row","_createCellForYear","_yearSelected","_getActiveCell","yearName","_shouldEnableYear","SatYearView","monthSelected","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","SatCalendarHeader","_intl","calendar","changeDetectorRef","stateChanges","currentView","multi-year","currentPeriodClicked","orderPeriod","orderPeriodLabel","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","SatCalendar","forwardRef","dateRangesChange","_moveFocusOnNextTick","startView","_intlChanges","_startAt","_clampedActiveDate","_currentView","_calendarHeaderPortal","ComponentPortal","headerComponent","startAt","ngAfterViewChecked","focusActiveCell","ngOnDestroy","unsubscribe","complete","change","firstChange","view","_getCurrentViewComponent","detectChanges","updateTodaysDate","monthView","yearView","multiYearView","_yearSelectedInMultiYearView","normalizedYear","_monthSelectedInYearView","normalizedMonth","_userSelected","_goToDateInView","matDatepickerAnimations","transformPanel","trigger","state","opacity","transform","transition","animate","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","Overlay","useFactory","SatDatepickerContentBase","_SatDatepickerContentMixinBase","mixinColor","SatDatepickerContent","elementRef","ngAfterViewInit","_calendar","close","datepicker","[@transformPanel]","[class.mat-datepicker-content-touch]","animations","inputs","SatDatepicker","_dialog","_overlay","_viewContainerRef","scrollStrategy","_document","_touchUi","openedStream","closedStream","_opened","_validSelected","_focusedElementBeforeOpen","_inputSubscription","Subscription","EMPTY","_disabledChange","_selectedChanged","_scrollStrategy","_rangeMode","mode","_datepickerInput","_color","_getThemePalette","coerceBooleanProperty","_disabled","disabled","newValue","open","_dateFilter","_popupRef","dispose","_popupComponentRef","select","oldValue","_selectRange","dates","_selectYear","_selectMonth","_registerInput","input","_valueChange","activeElement","touchUi","_openAsDialog","_openAsPopup","hasAttached","detach","_dialogRef","_calendarPortal","isAttached","completeClose","setTimeout","direction","viewContainerRef","panelClass","afterClosed","componentInstance","_setColor","_createPopup","attach","instance","updatePosition","overlayConfig","OverlayConfig","positionStrategy","_createPopupPositionStrategy","hasBackdrop","backdropClass","overlayElement","setAttribute","merge","backdropClick","detachments","keydownEvents","filter","ESCAPE","position","flexibleConnectedTo","getConnectedOverlayOrigin","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withLockedPosition","withPositions","originX","originY","overlayX","overlayY","color","MatDialog","ViewContainerRef","DOCUMENT","MAT_DATEPICKER_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","SatDatepickerInput","multi","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","SatDatepickerInputEvent","target","targetElement","_formField","dateChange","_onTouched","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","control","_datepicker","matDatepickerMin","actual","controlValue","_maxValidator","matDatepickerMax","_filterValidator","matDatepickerFilter","_rangeValidator","matDatepickerRange","_validator","Validators","compose","localeChanges","_value","rangeValue","oldDate","_min","_max","element","blur","registerOnValidatorChange","fn","validate","c","getPopupConnectionElementRef","writeValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","_onKeydown","isAltDownArrow","readOnly","_onInput","parts","split","beginDateString","endDateString","_onChange","_onBlur","_formatValue","Directive","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.aria-owns]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","(blur)","(keydown)","MatFormField","SatDatepickerToggleIcon","SatDatepickerToggle","defaultTabIndex","_stateChanges","parsedTabIndex","Number","tabIndex","_watchStateChanges","_open","stopPropagation","datepickerDisabled","observableOf","inputDisabled","datepickerToggled","[attr.tabindex]","[class.mat-datepicker-toggle-active]","[class.mat-accent]","[class.mat-warn]","(focus)","Attribute","ContentChild","SatDatepickerModule","CommonModule","MatButtonModule","MatDialogModule","OverlayModule","A11yModule","PortalModule","exports","declarations","entryComponents"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 8.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<sat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n/** First day of week according locale.\n * Taken form moment.js source code https://github.com/moment/moment/tree/develop/src/locale\n */\nconst FIRST_DAY_OF_WEEK = {\n  af:1, ar:6, 'ar-ly':6, 'ar-ma':6, 'ar-tn':1, az:1, be:1, bg:1, bm:1, br:1, bs:1, ca:1, cs:1, cv:1,\n  cy:1, da:1, de:1, 'de-at':1, 'de-ch':1, el:1, 'en-au':1, 'en-gb':1, 'en-ie':1, 'en-nz':1, eo:1,\n  es:1, 'es-do':1, et:1, eu:1, fa:6, fi:1, fo:1, fr:1, 'fr-ch':1, fy:1, gd:1, gl:1, 'gom-latn':1,\n  hr:1, hu:1, 'hy-am':1, id:1, is:1, it:1, jv:1, ka:1, kk:1, km:1, ky:1, lb:1, lt:1, lv:1, me:1,\n  mi:1, mk:1, ms:1, 'ms-my':1, mt:1, my:1, nb:1, nl:1, 'nl-be':1, nn:1, pl:1, pt:1, 'pt-BR': 0, ro:1, ru:1,\n  sd:1, se:1, sk:1, sl:1, sq:1, sr:1, 'sr-cyrl':1, ss:1, sv:1, sw:1, 'tet':1, tg:1, 'tl-ph':1,\n  'tlh':1, tr:1, 'tzl':1, 'tzm':6, 'tzm-latn':6, 'ug-cn':1, uk:1, ur:1, uz:1, 'uz-latn':1, vi:1,\n  'x-pseudo':1, yo:1, 'zh-cn':1,\n};\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is.\n    // Sometimes people use excess language definition, e.g. ru-RU,\n    // so we use fallback to two-letter language code\n    const locale = this.locale.toLowerCase();\n    return FIRST_DAY_OF_WEEK[locale] || FIRST_DAY_OF_WEEK[locale.substr(0, 2)] || 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n    imports: [PlatformModule],\n    providers: [\n        {provide: DateAdapter, useClass: NativeDateAdapter},\n    ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n    imports: [NativeDateModule],\n    providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class SatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n    return Error(\n        `SatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n        `modules at your application root: SatNativeDateModule, MatMomentDateModule, or provide a ` +\n        `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class SatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * Extra CSS classes that can be associated with a calendar cell.\n */\nexport type SatCalendarCellCssClasses = string | string[] | Set<string> | {[key: string]: any};\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class SatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean,\n              public cssClasses?: SatCalendarCellCssClasses) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[sat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SatCalendarBody implements OnChanges {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: SatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The value in the table since range of dates started.\n   * Null means no interval or interval doesn't start in this month\n   */\n  @Input() begin: number|null;\n\n  /** The value in the table representing end of dates range.\n   * Null means no interval or interval doesn't end in this month\n   */\n  @Input() end: number|null;\n\n  /** Whenever user already selected start of dates interval. */\n  @Input() beginSelected: boolean;\n\n  /** Whenever the current month is before the date already selected */\n  @Input() isBeforeSelected: boolean;\n\n  /** Whether to mark all dates as semi-selected. */\n  @Input() rangeFull: boolean;\n\n  /** Whether to use date range selection behaviour.*/\n  @Input() rangeMode = false;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  _firstRowOffset: number;\n\n  /** Padding for the individual date cells. */\n  _cellPadding: string;\n\n  /** Width of an individual cell. */\n  _cellWidth: string;\n\n  /** The cell number of the hovered cell */\n  _cellOver: number;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: SatCalendarCell): void {\n    if (cell.enabled) {\n      this.selectedValueChange.emit(cell.value);\n    }\n  }\n\n  _mouseOverCell(cell: SatCalendarCell): void {\n    this._cellOver = cell.value;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const columnChanges = changes.numCols;\n    const {rows, numCols} = this;\n\n    if (changes.rows || columnChanges) {\n      this._firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n    }\n\n    if (changes.cellAspectRatio || columnChanges || !this._cellPadding) {\n      this._cellPadding = `${50 * this.cellAspectRatio / numCols}%`;\n    }\n\n    if (columnChanges || !this._cellWidth) {\n      this._cellWidth = `${100 / numCols}%`;\n    }\n\n    if (changes.activeCell) {\n      this._cellOver = this.activeCell + 1;\n    }\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Whenever to mark cell as semi-selected (inside dates interval). */\n  _isSemiSelected(date: number) {\n    if (!this.rangeMode) {\n      return false;\n    }\n    if (this.rangeFull) {\n      return true;\n    }\n    /** Do not mark start and end of interval. */\n    if (date === this.begin || date === this.end) {\n      return false;\n    }\n    if (this.begin && !this.end) {\n      return date > this.begin;\n    }\n    if (this.end && !this.begin) {\n      return date < this.end;\n    }\n    return date > <number>this.begin && date < <number>this.end;\n  }\n\n  /** Whenever to mark cell as semi-selected before the second date is selected (between the begin cell and the hovered cell). */\n  _isBetweenOverAndBegin(date: number): boolean {\n    if (!this._cellOver || !this.rangeMode || !this.beginSelected) {\n      return false;\n    }\n    if (this.isBeforeSelected && !this.begin) {\n      return date > this._cellOver;\n    }\n    if (this._cellOver > this.begin) {\n      return date > this.begin && date < this._cellOver;\n    }\n    if (this._cellOver < this.begin) {\n      return date < this.begin && date > this._cellOver;\n    }\n    return false;\n  }\n\n  /** Whenever to mark cell as begin of the range. */\n  _isBegin(date: number): boolean {\n    if (this.rangeMode && this.beginSelected && this._cellOver) {\n      if (this.isBeforeSelected && !this.begin) {\n        return this._cellOver === date;\n      } else {\n        return (this.begin === date && !(this._cellOver < this.begin)) ||\n          (this._cellOver === date && this._cellOver < this.begin)\n      }\n    }\n    return this.begin === date;\n  }\n\n  /** Whenever to mark cell as end of the range. */\n  _isEnd(date: number): boolean {\n    if (this.rangeMode && this.beginSelected && this._cellOver) {\n      if (this.isBeforeSelected && !this.begin) {\n        return false;\n      } else {\n        return (this.end === date && !(this._cellOver > this.begin)) ||\n          (this._cellOver === date && this._cellOver > this.begin)\n      }\n    }\n    return this.end === date;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        const activeCell: HTMLElement | null =\n            this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n        if (activeCell) {\n          activeCell.focus();\n        }\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter} from '../datetime/date-adapter';\nimport {MAT_DATE_FORMATS, MatDateFormats} from '../datetime/date-formats';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {SatCalendarBody, SatCalendarCell, SatCalendarCellCssClasses} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'sat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SatMonthView<D> implements AfterContentInit {\n\n  /** Current start of interval. */\n  @Input()\n  get beginDate(): D | null { return this._beginDate; }\n  set beginDate(value: D | null) {\n    this._beginDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this.updateRangeSpecificValues();\n  }\n  private _beginDate: D | null;\n\n  /** Current end of interval. */\n  @Input()\n  get endDate(): D | null { return this._endDate; }\n  set endDate(value: D | null) {\n    this._endDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this.updateRangeSpecificValues();\n  }\n  private _endDate: D | null;\n\n  /** Allow selecting range of dates. */\n  @Input() rangeMode = false;\n\n  /** Enables datepicker closing after selection */\n  @Input() closeAfterSelection = true;\n\n  /** First day of interval. */\n  _beginDateNumber: number | null;\n\n  /* Last day of interval. */\n  _endDateNumber: number | null;\n\n  /** Whenever full month is inside dates interval. */\n  _rangeFull: boolean | null = false;\n\n  /** Whenever user already selected start of dates interval. */\n  _beginDateSelected: D | boolean = false;\n\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => SatCalendarCellCssClasses;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(SatCalendarBody) _matCalendarBody: SatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: SatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n\n    if (this.rangeMode) {\n\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n      if (!this._beginDateSelected) { // At first click emit the same start and end of interval\n        this._beginDateSelected = selectedDate;\n        this.selectedChange.emit(selectedDate);\n      } else {\n        this._beginDateSelected = false;\n        this.selectedChange.emit(selectedDate);\n        this._userSelection.emit();\n      }\n      this._createWeekCells();\n    } else if (this._selectedDate != date) {\n\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n      this._userSelection.emit();\n      this._createWeekCells();\n    }\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n      case SPACE:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          if (!this._beginDateSelected) {\n            this._userSelection.emit();\n          }\n          if (this._beginDateSelected || !this.closeAfterSelection) {\n            this._focusActiveCell();\n          }\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this.updateRangeSpecificValues();\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates SatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      const cellClasses = this.dateClass ? this.dateClass(date) : undefined;\n\n      this._weeks[this._weeks.length - 1]\n          .push(new SatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n  /** Updates range full parameter on each begin or end of interval update.\n   * Necessary to display calendar-body correctly\n   */\n  private updateRangeSpecificValues(): void {\n    if (this.rangeMode) {\n      this._beginDateNumber = this._getDateInCurrentMonth(this._beginDate);\n      this._endDateNumber = this._getDateInCurrentMonth(this._endDate);\n      this._rangeFull = this.beginDate && this.endDate && !this._beginDateNumber &&\n        !this._endDateNumber &&\n        this._dateAdapter.compareDate(this.beginDate, this.activeDate) <= 0 &&\n        this._dateAdapter.compareDate(this.activeDate, this.endDate) <= 0;\n    } else {\n      this._beginDateNumber = this._endDateNumber = null;\n      this._rangeFull = false;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {SatCalendarBody, SatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {DateAdapter} from '../datetime/date-adapter';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'sat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(SatCalendarBody) _matCalendarBody: SatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: SatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n      case SPACE:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an SatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new SatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {SatCalendarBody, SatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {DateAdapter} from '../datetime/date-adapter';\nimport {MAT_DATE_FORMATS, MatDateFormats} from '../datetime/date-formats';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'sat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(SatCalendarBody) _matCalendarBody: SatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: SatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n      case SPACE:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an SatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new SatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {SatDatepickerIntl} from './datepicker-intl';\nimport {SatMonthView} from './month-view';\nimport {SatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {SatYearView} from './year-view';\nimport {SatCalendarCellCssClasses} from './calendar-body';\n\nimport {SatDatepickerRangeValue} from './datepicker-input';\nimport {DateAdapter} from '../datetime/date-adapter';\nimport {MAT_DATE_FORMATS, MatDateFormats} from '../datetime/date-formats';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type SatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for SatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'sat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SatCalendarHeader<D> {\n  constructor(private _intl: SatDatepickerIntl,\n              @Inject(forwardRef(() => SatCalendar)) public calendar: SatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label.\n   * Option`calendar.orderPeriodLabel` sort the label period views.\n   * - Default [multi-year]: multi-year then back to month\n   * - Month [month]: month > year > multi-year\n   */\n  currentPeriodClicked(): void {\n    const mouthFirstOrder: SatCalendarView[] = ['month', 'year', 'multi-year'];\n    const defaultOrder: SatCalendarView[] = ['month', 'multi-year', 'month'];\n    const orderPeriod = this.calendar.orderPeriodLabel === 'month' ? mouthFirstOrder : defaultOrder;\n    switch (this.calendar.currentView) {\n      case 'month':\n        this.calendar.currentView = orderPeriod[1];\n        break;\n      case 'year':\n          this.calendar.currentView = orderPeriod[2]\n          break;\n      default:\n        this.calendar.currentView = orderPeriod[0]\n        break;\n    }\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'sat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n\n    /** Beginning of date range. */\n    @Input()\n    get beginDate(): D | null { return this._beginDate; }\n    set beginDate(value: D | null) {\n        this._beginDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    private _beginDate: D | null;\n\n    /** Date range end. */\n    @Input()\n    get endDate(): D | null { return this._endDate; }\n    set endDate(value: D | null) {\n        this._endDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    private _endDate: D | null;\n\n    /** Whenever datepicker is for selecting range of dates. */\n    @Input() rangeMode = false;\n\n    /** Enables datepicker closing after selection */\n    @Input() closeAfterSelection = true;\n\n    /** Emits when new pair of dates selected. */\n    @Output() dateRangesChange = new EventEmitter<SatDatepickerRangeValue<D>>();\n\n\n    /** Whenever user already selected start of dates interval. */\n    private _beginDateSelected = false;\n\n    /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: SatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => SatCalendarCellCssClasses;\n\n  /** Order the views when clicking on period label button */\n  @Input() orderPeriodLabel: 'multi-year' | 'month' = 'multi-year';\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(SatMonthView) monthView: SatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(SatYearView) yearView: SatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(SatMultiYearView) multiYearView: SatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): SatCalendarView { return this._currentView; }\n  set currentView(value: SatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n  }\n  private _currentView: SatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: SatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || SatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (this.rangeMode) {\n        if (!this._beginDateSelected) {\n          this._beginDateSelected = true;\n          this.beginDate = date;\n          this.endDate = date;\n        } else {\n          this._beginDateSelected = false;\n          if (this._dateAdapter.compareDate(<D>this.beginDate, date) <= 0) {\n            this.dateRangesChange.emit({begin: <D>this.beginDate, end: date});\n          } else {\n            this.dateRangesChange.emit({begin: date, end: <D>this.beginDate});\n          }\n        }\n    } else if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material datepicker.\n * @docs-private\n */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(1, 0.8)'\n    })),\n    transition('void => enter',  animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n      opacity: 1,\n      transform: 'scale(1, 1)'\n    }))),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  mixinColor,\n  ThemePalette,\n} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {SatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {SatCalendarCellCssClasses} from './calendar-body';\nimport {SatDatepickerInput, SatDatepickerRangeValue} from './datepicker-input';\nimport {DateAdapter} from '../datetime/date-adapter';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('sat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to SatDatepickerContent.\n/** @docs-private */\nexport class SatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _SatDatepickerContentMixinBase: CanColorCtor & typeof SatDatepickerContentBase =\n    mixinColor(SatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * SatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'sat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class SatDatepickerContent<D> extends _SatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(SatCalendar) _calendar: SatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: SatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n\n  close() {\n    if (this.datepicker.closeAfterSelection) {\n      this.datepicker.close();\n    }\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'sat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class SatDatepicker<D> implements OnDestroy, CanColor {\n\n  /** Whenever datepicker is for selecting range of dates. */\n  @Input()\n  get rangeMode(): boolean {\n    return this._rangeMode;\n  }\n  set rangeMode(mode: boolean) {\n    this._rangeMode = mode;\n    if (this.rangeMode) {\n      this._validSelected = null;\n    } else {\n      this._beginDate = this._endDate = null;\n    }\n  }\n  private _rangeMode;\n\n  /** Start of dates interval. */\n  @Input()\n  get beginDate(): D | null { return this._beginDate; }\n  set beginDate(value: D | null) {\n    this._validSelected = null;\n    this._beginDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  _beginDate: D | null;\n\n  /** End of dates interval. */\n  @Input()\n  get endDate(): D | null { return this._endDate; }\n  set endDate(value: D | null) {\n    this._validSelected = null;\n    this._endDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  _endDate: D | null;\n\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    if (this.rangeMode) {\n      return this._startAt || (this._datepickerInput && this._datepickerInput.value ?\n        (<SatDatepickerRangeValue<D>>this._datepickerInput.value).begin : null);\n    }\n    return this._startAt || (this._datepickerInput ? <D|null>this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => SatCalendarCellCssClasses;\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Enables datepicker closing after selection */\n  @Input() closeAfterSelection = true;\n\n  /** Order the views when clicking on period label button */\n  @Input() orderPeriodLabel: 'month' | 'multi-year' = 'multi-year';\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `sat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<SatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<SatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<SatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: SatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<SatDatepickerRangeValue<D>|D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n\n  /** Selects the given date range */\n  _selectRange(dates: SatDatepickerRangeValue<D>): void {\n    if (!this._dateAdapter.sameDate(dates.begin, this.beginDate) ||\n      !this._dateAdapter.sameDate(dates.end, this.endDate)) {\n      this._selectedChanged.next(dates);\n    }\n    this._beginDate = dates.begin;\n    this._endDate = dates.end;\n  }\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: SatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A SatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange\n          .subscribe((value: SatDatepickerRangeValue<D> | D | null) => {\n          if (value === null) {\n            this.beginDate = this.endDate = this._selected = null;\n            return;\n          }\n          if (value && value.hasOwnProperty('begin') && value.hasOwnProperty('end')) {\n            value = <SatDatepickerRangeValue<D>>value;\n            if (value.begin && value.end &&\n              this._dateAdapter.compareDate(value.begin, value.end) <= 0) {\n              this.beginDate = value.begin;\n              this.endDate = value.end;\n            } else {\n              this.beginDate = this.endDate = null;\n            }\n          } else {\n            this._selected = <D>value;\n          }\n        });\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an SatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<SatDatepickerContent<D>>(SatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<SatDatepickerContent<D>>(SatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withLockedPosition()\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {DateAdapter} from '../datetime/date-adapter';\nimport {MAT_DATE_FORMATS, MatDateFormats} from '../datetime/date-formats';\nimport {ThemePalette} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {SatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => SatDatepickerInput),\n  multi: true\n};\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => SatDatepickerInput),\n  multi: true\n};\n\n/**\n * Special interface to input and output dates interval.\n */\nexport interface SatDatepickerRangeValue<D> {\n  begin: D | null;\n  end: D | null;\n}\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use SatDatepickerInputEvent instead.\n */\nexport class SatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: SatDatepickerRangeValue<D> | D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: SatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a SatDatepicker. */\n@Directive({\n  selector: 'input[satDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: SatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class SatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set satDatepicker(value: SatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new SatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new SatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: SatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: SatDatepickerRangeValue<D> | D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): SatDatepickerRangeValue<D> | D | null {\n    return this._value;\n  }\n  set value(value:  SatDatepickerRangeValue<D> | D | null) {\n    if (value && value.hasOwnProperty('begin') && value.hasOwnProperty('end')) {\n      /** Range mode */\n      const rangeValue = <SatDatepickerRangeValue<D>>value;\n      rangeValue.begin = this._dateAdapter.deserialize(rangeValue.begin);\n      rangeValue.end = this._dateAdapter.deserialize(rangeValue.end);\n      this._lastValueValid = !rangeValue.begin || !rangeValue.end ||\n          this._dateAdapter.isValid(rangeValue.begin) && this._dateAdapter.isValid(rangeValue.end);\n      rangeValue.begin = this._getValidDateOrNull(rangeValue.begin);\n      rangeValue.end = this._getValidDateOrNull(rangeValue.end);\n      let oldDate = <SatDatepickerRangeValue<D> | null>this.value;\n      this._elementRef.nativeElement.value =\n          rangeValue && rangeValue.begin && rangeValue.end\n              ? this._dateAdapter.format(rangeValue.begin, this._dateFormats.display.dateInput) +\n                ' - ' +\n                this._dateAdapter.format(rangeValue.end, this._dateFormats.display.dateInput)\n              : '';\n      if (oldDate == null && rangeValue != null || oldDate != null && rangeValue == null ||\n          !this._dateAdapter.sameDate((<SatDatepickerRangeValue<D>>oldDate).begin,\n              rangeValue.begin) ||\n          !this._dateAdapter.sameDate((<SatDatepickerRangeValue<D>>oldDate).end,\n              rangeValue.end)) {\n        if (rangeValue.end && rangeValue.begin &&\n            this._dateAdapter\n                .compareDate(rangeValue.begin, rangeValue.end ) > 0) { // if begin > end\n          value = null;\n        }\n        this._value = value;\n        this._valueChange.emit(value);\n      }\n    } else {\n      /** Not range mode */\n      value = this._dateAdapter.deserialize(value);\n      this._lastValueValid = !value || this._dateAdapter.isValid(value);\n      value = this._getValidDateOrNull(value);\n      let oldDate = this.value;\n      this._value = value;\n      this._elementRef.nativeElement.value =\n          value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n      if (!this._dateAdapter.sameDate(<D>oldDate, value)) {\n        this._valueChange.emit(value);\n      }\n    }\n  }\n  private _value: SatDatepickerRangeValue<D> | D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<SatDatepickerInputEvent<D>> =\n      new EventEmitter<SatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<SatDatepickerInputEvent<D>> =\n      new EventEmitter<SatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<SatDatepickerRangeValue<D>|D|null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    if (this._datepicker.rangeMode && control.value) {\n      const beginDate =\n          this._getValidDateOrNull(this._dateAdapter.deserialize(control.value.begin));\n      const endDate =\n          this._getValidDateOrNull(this._dateAdapter.deserialize(control.value.end));\n      if (this.min) {\n        if (beginDate && this._dateAdapter.compareDate(this.min, beginDate) > 0) {\n          return {'matDatepickerMin': {'min': this.min, 'actual': beginDate}};\n        }\n        if (endDate && this._dateAdapter.compareDate(this.min, endDate) > 0) {\n          return {'matDatepickerMin': {'min': this.min, 'actual': endDate}};\n        }\n      }\n      return null;\n    }\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    if (this._datepicker.rangeMode && control.value) {\n      const beginDate =\n          this._getValidDateOrNull(this._dateAdapter.deserialize(control.value.begin));\n      const endDate = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value.end));\n      if (this.max) {\n        if (beginDate && this._dateAdapter.compareDate(this.max, beginDate) < 0 ) {\n          return {'matDatepickerMax': {'max': this.max, 'actual': beginDate}};\n        }\n        if (endDate && this._dateAdapter.compareDate(this.max, endDate) < 0) {\n          return {'matDatepickerMax': {'max': this.max, 'actual': endDate}};\n        }\n      }\n      return null;\n    }\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    if (this._datepicker.rangeMode && control.value) {\n      const beginDate =\n          this._getValidDateOrNull(this._dateAdapter.deserialize(control.value.begin));\n      const endDate = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value.end));\n      return !this._dateFilter || !beginDate && !endDate ||\n          this._dateFilter(beginDate) && this._dateFilter(endDate) ?\n        null : {'matDatepickerFilter': true};\n    }\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The form control validator for the date filter. */\n  private _rangeValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    if (this._datepicker.rangeMode && control.value) {\n      const beginDate =\n          this._getValidDateOrNull(this._dateAdapter.deserialize(control.value.begin));\n      const endDate = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value.end));\n      return !beginDate || !endDate || this._dateAdapter.compareDate(beginDate, endDate) <= 0 ?\n        null : {'matDatepickerRange': true};\n    }\n    return null;\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator,\n            this._filterValidator, this._rangeValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef<HTMLInputElement>,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  writeValue(value: SatDatepickerRangeValue<D> | D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n    if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date: SatDatepickerRangeValue<D>|D|null = null;\n    if (this._datepicker.rangeMode) {\n      const parts = value.split('-');\n      if (parts.length > 1) {\n          const position = Math.floor(parts.length / 2);\n          const beginDateString = parts.slice(0, position).join('-');\n          const endDateString = parts.slice(position).join('-');\n          let beginDate = this._dateAdapter.parse(beginDateString,\n              this._dateFormats.parse.dateInput);\n          let endDate = this._dateAdapter.parse(endDateString, this._dateFormats.parse.dateInput);\n          this._lastValueValid = !beginDate || !endDate || this._dateAdapter.isValid(beginDate) &&\n                                                           this._dateAdapter.isValid(endDate);\n          beginDate = this._getValidDateOrNull(beginDate);\n          endDate = this._getValidDateOrNull(endDate);\n          if (beginDate && endDate) {\n            date = <SatDatepickerRangeValue<D>>{begin: beginDate, end: endDate};\n          }\n      }\n    } else {\n      date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n      this._lastValueValid = !date || this._dateAdapter.isValid(date);\n      date = this._getValidDateOrNull(date);\n    }\n    this._value = date;\n    this._cvaOnChange(date);\n    this._valueChange.emit(date);\n    this.dateInput.emit(new SatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  _onChange() {\n    this.dateChange.emit(new SatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette(): ThemePalette {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: SatDatepickerRangeValue<D> | D | null) {\n      if (value && value.hasOwnProperty('begin') && value.hasOwnProperty('end')) {\n          value = value as SatDatepickerRangeValue<D>;\n          this._elementRef.nativeElement.value =\n              value && value.begin && value.end\n                  ? this._dateAdapter.format(value.begin, this._dateFormats.display.dateInput) +\n                  ' - ' +\n                  this._dateAdapter.format(value.end, this._dateFormats.display.dateInput)\n                  : ''\n      }\n      else {\n            value = value as D | null\n          this._elementRef.nativeElement.value =\n              value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n      }\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {MatButton} from '@angular/material/button';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {SatDatepicker} from './datepicker';\nimport {SatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class SatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'sat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n    // consumer may have provided, while still being able to receive focus.\n    '[attr.tabindex]': '-1',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n    '(focus)': '_button.focus()',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: SatDatepicker<D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Whether ripples on the toggle should be disabled. */\n  @Input() disableRipple: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(SatDatepickerToggleIcon) _customIcon: SatDatepickerToggleIcon;\n\n  /** Underlying button element. */\n  @ViewChild('button') _button: MatButton;\n\n  constructor(\n    public _intl: SatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string) {\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {SatCalendar, SatCalendarHeader} from './calendar';\nimport {SatCalendarBody} from './calendar-body';\nimport {\n  SatDatepicker,\n  SatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {SatDatepickerInput} from './datepicker-input';\nimport {SatDatepickerIntl} from './datepicker-intl';\nimport {SatDatepickerToggle, SatDatepickerToggleIcon} from './datepicker-toggle';\nimport {SatMonthView} from './month-view';\nimport {SatMultiYearView} from './multi-year-view';\nimport {SatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    SatCalendar,\n    SatCalendarBody,\n    SatDatepicker,\n    SatDatepickerContent,\n    SatDatepickerInput,\n    SatDatepickerToggle,\n    SatDatepickerToggleIcon,\n    SatMonthView,\n    SatYearView,\n    SatMultiYearView,\n    SatCalendarHeader,\n  ],\n  declarations: [\n    SatCalendar,\n    SatCalendarBody,\n    SatDatepicker,\n    SatDatepickerContent,\n    SatDatepickerInput,\n    SatDatepickerToggle,\n    SatDatepickerToggleIcon,\n    SatMonthView,\n    SatYearView,\n    SatMultiYearView,\n    SatCalendarHeader,\n  ],\n  providers: [\n    SatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    SatDatepickerContent,\n    SatCalendarHeader,\n  ]\n})\nexport class SatDatepickerModule {}\n"]}